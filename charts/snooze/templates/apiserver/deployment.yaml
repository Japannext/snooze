---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-apiserver"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: snooze
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/component: apiserver
    app.kubernetes.io/part-of: "{{ .Values.partOf }}"
spec:
  replicas: {{ .Values.apiserver.replicas }}
  revisionHistoryLimit: {{ .Values.apiserver.revisionHistoryLimit }}
  selector:
    matchLabels:
      app.kubernetes.io/name: snooze
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/component: apiserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snooze
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/component: apiserver
        app.kubernetes.io/part-of: "{{ .Values.partOf }}"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- if .Values.apiserver.podAnnotations }}
        {{- toYaml .Values.apiserver.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      containers:
      - name: snooze-apiserver
        image: "{{- include "snooze.image" . | trim }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        args:
        - apiserver
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        {{- include "snooze.opensearch.env" . | nindent 8 }}
        - name: APISERVER_AUTH_CONFIG
          value: /config/auth_config.yaml
        {{- if .Values.apiserver.cors }}
        - name: APISERVER_CORS_CONFIG
          value: /config/cors.yaml
        {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ .Release.Name }}-common"
        volumeMounts:
        - name: config
          mountPath: /config
        {{- if .Values.cacertConfigMap }}
        - name: cacert
          mountPath: /cacert
        {{- end }}
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: config
        configMap:
          name: "{{ .Release.Name }}-apiserver-config"
      {{- with .Values.cacertConfigMap }}
      - name: cacert
        configMap:
          name: "{{ . }}"
      {{- end }}
