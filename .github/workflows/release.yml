name: Create new release

on:
  push:
    tags:
      - v*

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: Install Poetry
        run: python -m pip install 'poetry>=1.2.0a2'
      - name: Cache Poetry
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: "{{ runner.os }}-poetry-test-{{ hashFIles('**/poetry.lock') }}"
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --only default --only test
      - name: Running Pylint
        run: poetry run pytest

  release:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: changelog
        run: |
          export CHANGELOG="$(awk -vRS='\n\n' -vORS='' 'FNR==2 {print}' CHANGELOG.md)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=changelog::$(echo "$CHANGELOG")"
        id: changelog
      - name: Update release with changelog
        id: update
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}

  pypi:
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up Python 3.6'
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: Install Poetry
        run: python -m pip install 'poetry>=1.2.0a2'
      - name: Build
        run: poetry build .
      - name: Upload package to pypi
        id: upload
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.TWINE_USERNAME }}
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: poetry publish

  web:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10.x
          registry-url: 'https://registry.npmjs.org'
      - name: install deps
        run: npm install
        working-directory: ./web
      - name: build
        run: npm run build
        working-directory: ./web
      - name: archive dist files
        run: tar -czf snooze-web.tar.gz --transform='s+^./web/dist+opt/snooze/web+' ./web/dist/
      - name: package_name
        run: echo "::set-output name=package_name::$(echo snooze-web-$(cat VERSION).tar.gz)"
        id: package_name
      - name: upload
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./snooze-web.tar.gz
          asset_name: ${{ steps.package_name.outputs.package_name }}
          tag: ${{ github.ref }}
          overwrite: true

  rpm:
    runs-on: ubuntu-latest
    needs: web
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            python3-venv \
            rpm
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: Install dependencies
        id: install-deps
        run: |
          python -m pip install --upgrade pip
          pip install \
            virtualenv \
            venvctrl
          mkdir /var/tmp/BUILD /var/tmp/SOURCES /var/tmp/SRPMS/ /var/tmp/RPMS
      - name: Build RPM
        id: rpm-build
        run: rpmbuild --bb snooze-server.spec
      - name: package_path
        run: echo "::set-output name=package_path::$(echo /var/tmp/RPMS/x86_64/snooze-server-$(cat VERSION)-1.x86_64.rpm)"
        id: package_path
      - name: package_name
        run: echo "::set-output name=package_name::$(echo snooze-server-$(cat VERSION)-1.x86_64.rpm)"
        id: package_name
      - name: upload
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package_path.outputs.package_path }}
          asset_name: ${{ steps.package_name.outputs.package_name }}
          tag: ${{ github.ref }}
          overwrite: true

  deb:
    runs-on: ubuntu-latest
    needs: web
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            virtualenv \
            debhelper \
            wget
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: version
        run: echo "::set-output name=version::$(cat VERSION)"
        id: version
      - name: Prepare env
        id: prepare
        run: |
          find *dsc  -exec sed -i "s+__VERSION__+$(cat VERSION)+g" {} +
          for f in *diff.gz; do
            cp "$f" "$f~" &&   
            gzip -cd "$f~" | sed "s+__VERSION__+$(cat VERSION)+g" | gzip > "$f"
          done
          wget https://github.com/snoozeweb/snooze/releases/download/v$(cat VERSION)/snooze-web-$(cat VERSION).tar.gz -O snooze-server_$(cat VERSION).tar.gz
          mv snooze-server.diff.gz snooze-server_$(cat VERSION).diff.gz 
      - name: Extract
        id: extract
        run: dpkg-source -x --no-check snooze-server.dsc
      - name: Build
        id: build
        run: dpkg-buildpackage
        working-directory: ./snooze-server-${{ steps.version.outputs.version }}
      - name: upload
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./*.deb
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  docker_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker Lint
        id: docker-lint
        run: |
          docker run --rm -i ghcr.io/hadolint/hadolint hadolint \
          --ignore DL3008 \
          --ignore DL3018 \
          --ignore DL3059 \
          - < Dockerfile

  docker_push:
    needs: [docker_tests, pypi, web]
    runs-on: ubuntu-latest
    env:
      REPOSITORY_URL: registry.hub.docker.com
      IMAGE_NAME: snoozeweb/snooze
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Variables
        id: vars
        run: echo "::set-output name=SHORT_COMMIT_ID::$(git rev-parse --short HEAD)"
      - name: Build Image
        uses: nick-invision/retry@v2
        id: docker-build
        with:
          retry_on: error
          max_attempts: 3
          command: >-
            docker build
            --build-arg VCS_REF=${{ github.sha }}
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            --build-arg VERSION=$(cat VERSION)
            -t $IMAGE_NAME
            -t $REPOSITORY_URL/$IMAGE_NAME:$(cat VERSION)
            -t $REPOSITORY_URL/$IMAGE_NAME:${{ steps.vars.outputs.SHORT_COMMIT_ID }}
            -t $REPOSITORY_URL/$IMAGE_NAME:latest .
      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login $REPOSITORY_URL --username "$DOCKER_USERNAME" --password-stdin
      - name: Publish Image
        id: docker-push
        run: |
          docker push $REPOSITORY_URL/$IMAGE_NAME:$(cat VERSION)
          docker push $REPOSITORY_URL/$IMAGE_NAME:${{ steps.vars.outputs.SHORT_COMMIT_ID }}
          docker push $REPOSITORY_URL/$IMAGE_NAME:latest
