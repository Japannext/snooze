# vim:sw=2:ts=2:sts=2:et:
---
name: Create new release

'on':
  push:
    tags:
      - v*

jobs:

  python_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out git repository
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--default --with test'}

      - name: Running Pytest
        run: poetry run pytest

  github_release:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--with build'}

      - name: Running Pytest
        run: poetry run invoke changelog --github-output
        id: changelog

      - name: version
        run: poetry run invoke version --github-output
        id: version

      - name: Update release with changelog
        id: update
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.version.outputs.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}

  pypi:
    runs-on: ubuntu-latest
    needs: [python_tests, github_release]
    steps:
      - name: Checking out git repository
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--with build'}

      - name: Build pip packages
        run: poetry run invoke pip.build --github-output
        id: build

      - name: Upload job artifact
        uses: actions/upload-artifact@v2
        with:
          name: pip
          path: ${{ steps.build.outputs.PATH }}

      - name: Upload to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.build.outputs.PATH }}
          asset_name: ${{ steps.build.outputs.ASSET_NAME }}
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload package to pypi
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.TWINE_USERNAME }}
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: poetry publish

  web:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out git repository
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10.x
          registry-url: 'https://registry.npmjs.org'

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--with build'}

      - name: Build web tarball
        run: poetry run web.build --github-output
        id: build

      - name: Upload job artifact
        uses: actions/upload-artifact@v2
        with:
          name: web
          path: ${{ steps.build.outputs.PATH }}

      - name: Upload to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.build.outputs.PATH }}
          asset_name: ${{ steps.build.outputs.ASSET_NAME }}
          tag: ${{ github.ref }}
          overwrite: true

  rpm:
    runs-on: ubuntu-latest
    container: 'centos:7'
    needs: [pypi, web]
    steps:
      - name: Checking out git repository
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--with build'}

      - name: Download pip package
        uses: actions/download-artifact@v2
        with: {name: pip}

      - name: Download web tarball
        uses: actions/download-artifact@v2
        with: {name: web}

      - name: Installing rpmbuild
        run: yum install rpm-build

      - name: Build rpm
        run: poetry run invoke rpm.build --github-output
        id: build

      - name: Upload to github
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.build.outputs.PATH }}
          asset_name: ${{ steps.build.outputs.ASSET_NAME }}
          tag: ${{ github.ref }}
          overwrite: true

  deb:
    runs-on: ubuntu-latest
    needs: [pypi, web]
    container: 'ubuntu:18.04'
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--with build'}

      - name: Download pip package
        uses: actions/download-artifact@v2
        with: {name: pip}

      - name: Download web tarball
        uses: actions/download-artifact@v2
        with: {name: web}

      - name: Build deb
        run: poetry run invoke debian.build --github-output
        id: build

      - name: Upload to github
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.build.outputs.PATH }}
          asset_name: ${{ steps.build.outputs.ASSET_NAME }}
          tag: ${{ github.ref }}
          overwrite: true

  docker:
    needs: [pypi, web]
    runs-on: ubuntu-latest
    env:
      INVOKE_DOCKER_REPO: registry.hub.docker.com
      INVOKE_DOCKER_IMAGE: snoozeweb/snooze
    steps:
      - name: Checking out git repository
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: ./.github/actions/python-poetry
        with: {poetry_options: '--with build'}

      - name: Download pip package
        uses: actions/download-artifact@v2
        with: {name: pip}

      - name: Download web tarball
        uses: actions/download-artifact@v2
        with: {name: web}

      - name: Check dockerfile
        run: poetry run invoke docker.check

      - name: Build docker image
        run: poetry run invoke docker.build

      - name: Push docker image
        run: poetry run invoke docker.push
        env:
          INVOKE_DOCKER_PUSH_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          INVOKE_DOCKER_PUSH_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
